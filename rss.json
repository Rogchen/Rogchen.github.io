{"title":"Rogchen的博客","description":"深耕JAV、全栈开发，服务器维护，喜欢研究新奇东西。此为博客一枚。","language":"en","link":"https://rogchen.github.com","webMaster":"Rogchen","pubDate":"Mon, 22 Mar 2021 05:47:53 GMT","lastBuildDate":"Sat, 11 Mar 2023 17:20:43 GMT","generator":"hexo-generator-json-feed","items":[{"title":"redis笔记","link":"https://rogchen.github.com/2021/03/22/redis-all/","description":"redis是什么redis是使用c语言开发的一个开源（遵从bsd协议）高性能键值对的内存数据库，可以用作数据库、缓存、消息中间件等；它是一种NoSQL非关系型数据库。 优点: 性能优秀，数据再内存中，读写非常快，支持并发10w qps。 单进程单线程，是线程安全的，采用IO多路复用机制。 丰富的数据类型，支持字符串、散列(hashes)、列表(list)、集合(sets)、有序集合（sorted sets）等。 支持数据持久化，将内存中数据保存到磁盘中，重启时加载。 主从复制，哨兵，高可用。 可以用分布式锁。 可以作为消息中间件使用，支持分布订阅。 五种数据类型","pubDate":"Mon, 22 Mar 2021 05:47:53 GMT","guid":"https://rogchen.github.com/2021/03/22/redis-all/","category":["redis","哨兵","sentinel"]},{"title":"阅读笔记->同步锁synchronized/volatile","link":"https://rogchen.github.com/2020/12/21/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%8C%E6%AD%A5%E9%94%81synchronized/","description":"synchronized 关键字原理众所周知 synchronized 关键字是解决并发问题常用解决方案，有以下三种使用方式: 同步普通方法，锁的是当前对象。在范围操作符之后，返回类型声明之前使用。每次只能有一个线程进入该方法，此时线程获得的是成员锁。","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%90%8C%E6%AD%A5%E9%94%81synchronized/","category":["syschronized","lock","volatile"]},{"title":"阅读笔记->hashmap 的key跟扩容","link":"https://rogchen.github.com/2020/12/21/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-hashmap%E7%9A%84%E6%89%A9%E5%AE%B9/","description":"1、map-&gt;hashmap HashMap 底层是基于数组和链表实现的。其中有两个重要的参数：容量；负载因子.容量的默认大小是 16，负载因子是 0.75，当 HashMap 的 size &gt; 16*0.75 时就会发生扩容(容量和负载因子都可以自由调整)。key是采用传入参数的hashcode 在进行取模运算，在参数的hash是2^n时候跟位运算是一样的，所以采用位运算来做取模。 初始化 构造方法首先，int n = cap -1是为了防止cap已经是2的幂时，执行完后面的几条无符号右移操作之后，返回的capacity是这个cap的2倍，因为cap已经是2的幂了，就已经满足条件了。 如果不懂可以往下看完几个无符号移位后再回来看。比如容量是8 符合2^n次方，但是也满足了扩容。所以不直接用2^n来，而是采用位运算","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-hashmap%E7%9A%84%E6%89%A9%E5%AE%B9/","category":["hashmap","负载因子","容量"]},{"title":"复习笔记->semaphore/countDownLatch","link":"https://rogchen.github.com/2020/12/21/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/","description":"前言开发也经常需要跑并发测试，要是每次需要开jmater/loadrunner那这样太麻烦了，这边简单记录一个单元测试，实际生产使用需要对这快在进行优化。 锁的差别synchronized是互斥锁，每次只能有一个线程，semaphore也是同步锁维护的是一个许可集，调用acquire()获取一个许可，release()释放一个许可。 信号枪countDownLatch 信号枪当countDown退到0时候就执行awit的方法。可以用于并发/主线城等待等方式上的使用。","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/","category":["countDownLatch","semaphore","线程池"]},{"title":"数据库的分库分表操作","link":"https://rogchen.github.com/2020/12/21/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/","description":"1、前言 很早就听说了分库分表操作，但是一直没记住，这里只是单纯做个笔记。 2、读写分离将数据库分为主从库，一个主库（Master）用于写数据，多个从库（Slaver）进行轮询读取数据的过程，主从库之间通过某种通讯机制进行数据的同步，是一种常见的数据库架构。读写分离有个问题就是同步问题，有时候我们想要及时返回数据呢？所以我们经常是把一些着急返回的通过代码形式从主库去获取。 2.1、 为什么要读写分离大多数互联网数据操作往往都是读多写少，随着数据的增长，数据库的“读”会首先成为瓶颈。如果我们希望能线性地提升数据库的读性能和写性能，就需要让读写尽可能的不相互影响，各自为政。在使用读写分离之前我们应该考虑使用缓存能不能解决问题。然后再考虑对数据库按照 “读” 和 “写” 进行分组。读写分离意味着将一体的结构的进行分散，在数据量大、高并发的情景中要考虑以下这些问题","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/","category":["数据库","分库","分表"]},{"title":"vim使用","link":"https://rogchen.github.com/2020/12/21/user-vim/","description":"入门操作1、输入i进入编辑模式，按下esc/ctrl+c 输入:wq 保存，q！不保存强制退出，wq！强制保存操作提升2、 :set showmode+回车 即可显示提示。3、粘贴复制删除等操作123456789----命令模式：----yy 复制光标所在行2yy 复制光标所在行开始的2行p 粘贴dd 删除光标所在行（实际是剪切）3dd 删除光标所在行开始的3行（剪切）x 删除当前光标所在的字符X（大写) 删除当前光标前一个字符","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/user-vim/","category":["vim"]},{"title":"使用私有服镜像仓库","link":"https://rogchen.github.com/2020/12/21/user-aliyun-docker/","description":"1、登录仓库 sudo docker login --username=chenhk128@163.com registry.cn-hangzhou.aliyuncs.com 2、从Registry中拉取镜像 sudo docker pull registry.cn-hangzhou.aliyuncs.com/rogchen/rogchen_public:[镜像版本号] 3、将镜像推送到Registry","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/user-aliyun-docker/","category":["aliyun","repository"]},{"title":"springboot的configuration跟auto-configuration的区别。","link":"https://rogchen.github.com/2020/12/21/springboot-configuration/","description":"spring-boot提倡通过annotation来进行bean的配置，现在spring-boot里面常用的两种创建bean的方式有auto-configuration和configuration两种方式。 1、configuration配置的使用。在配置文件(添加@configuration的类)跟启动类在同个包路径下可用直接被扫描，因为springbootApplication注解自带ComponentScan,不需要在main方法添加扫描器。","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/springboot-configuration/","category":["springboot","configuration","autoconfiguration"]},{"title":"Rogchen-md学习","link":"https://rogchen.github.com/2020/12/21/rogchen-md/","description":"使用#来定义标题 #一级标题##二级标题###三级标题######共有六级标题 1、分割线--\\就是转义使用横线（-–上换行或者***或者___） 2、代码块-&gt;单行``代码块输出使用&quot;`“` 3、代码块-&gt;多行```12&lt;p&gt;abc&lt;/p&gt;&lt;p&gt;bbb&lt;/p&gt; 4、使用大于号”&gt;”表示引用 >一级引用，不以结婚为目的的恋爱都是耍流氓 >&gt;二级引用 >&gt;&gt;三级引用","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/rogchen-md/","category":["md"]},{"title":"nginx安装和使用","link":"https://rogchen.github.com/2020/12/21/nginx-user/","description":"nginx的编译安装下载nginx 选择版本，我这里使用v1.15.4 解压 tar xvf nginx-1.15.4.tar.gv 最好重命名该源码mv nginx-1.15.4 nginx-1.15.4-source 进入目录cd nginx-1.15.4-source 使用下面编译安装命令 1./configure --prefix=/home/nginx/nginx-1.15.4 --sbin-path=/home/nginx/nginx-1.15.4/sbin/nginx --conf-path=/home/nginx/nginx-1.15.4/conf/nginx.conf --error-log-path=/home/nginx/nginx-1.15.4/logs/error.log --http-log-path=/home/nginx/nginx-1.15.4/logs/access.log --pid-path=/home/nginx/nginx-1.15.4/pid/nginx_6379.pid --lock-path=/home/nginx/nginx-1.15.4/lock/nginx.lock --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --http-client-body-temp-path=/home/nginx/nginx-1.15.4/tmp/client/ --http-proxy-temp-path=/home/nginx/nginx-1.15.4/tmp/proxy/ --http-fastcgi-temp-path=/home/nginx/nginx-1.15.4/tmp/fcgi/ --http-uwsgi-temp-path=/home/nginx/nginx-1.15.4/tmp/uwsgi --http-scgi-temp-path=/home/nginx/nginx-1.15.4/tmp/scgi --with-pcre","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/nginx-user/","category":["nginx","限流","安装"]},{"title":"通过注解和拦截器或aop实现日志","link":"https://rogchen.github.com/2020/12/21/logger-Info/","description":"一、使用注解和拦截器 为什么使用拦截器而不是用过滤器呢？ 拦截器是基于Java的反射机制的，而过滤器是基于函数回调。 拦截器不依赖与servlet容器，过滤器依赖与servlet容器。 拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。 拦截器可以访问action上下文、值栈里的对象。","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/logger-Info/","category":["注解","拦截器","aop"]},{"title":"在linux使用v2ray进行翻墙","link":"https://rogchen.github.com/2020/12/21/linux-v2ray-client/","description":"1、因为v2ray不区分客户端和服务端唯一区分客户端跟服务端是config.json这个配置文件。这样我们就可以直接参照v2ray服务端的安装方式安装客户端。v2ray默认有三种安装方式：脚本安装、手动安装、编译安装。我们这里使用脚本安装。 2、下载v2raysudo wget https://install.direct/go.sh3、下载完成后执行sudo bash go.sh","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/linux-v2ray-client/","category":["linux","v2ray","翻墙"]},{"title":"linux不起服务占用一个端口","link":"https://rogchen.github.com/2020/12/21/linux-port/","description":"使用nc命令占用端口 1234567891011nc -l 8888 ####启用TCP端口，可以直接telnet通在其他主机上使用nc测试nc -v -w 1 192.168.1.1 -z 8888结果Connection to 192.168.1.1 8888 port [tcp/ddi-udp-1] succeeded!nc -l -u 8888 ####启用UDP端口，无法telnet通，可以使用nc检测。-u表示使用UDP协议nc -v -w 1 192.168.1.1 -u -z 8888结果Connection to 192.168.1.1 8888 port [udp/ddi-udp-1] succeeded!","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/linux-port/","category":["linux"]},{"title":"在linux上安装使用ll命令","link":"https://rogchen.github.com/2020/12/21/linux-ll/","description":"ll并不是linux下一个基本的命令，它实际上是ls -l的一个别名。Ubuntu默认不支持命令ll，必须用 ls -l，这样使用起来不是很方便。如果要使用此命令，可以作如下修改： 打开 ~/.bashrc找到 #alias ll=’ls -l’，去掉前面的#就可以了。（关闭原来的终端才能使命令生效）这样个人用户可以使用ll命令，当切换成超级用户后，使用ll命令时提示找不到命令，那是因为你只是修改了个人用户的配置，所以，切换成root后做相同的操作即可解决问题。启示：我们可以通过修改~/.bashrc添加任何其他的命令别名。 还有另外一种实现方法：","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/linux-ll/","category":["linux","ls -l","ll"]},{"title":"springboot使用mail群发邮件一","link":"https://rogchen.github.com/2020/12/21/javamail/","description":"原由 之前因为业务需要需要搭建一个邮件发送，网上一查一堆，也没什么毛病，这里主要是做个笔记。还有就是为了只会搭建个邮箱群发平台，但是查了一堆资料都是使用个账号，但是目前一些免费的账号都是有发送次数限制的。那是否是不是有多个账号进行群发呢？答案显然是有的。 javamail介绍 JavaMail API 按照功能可以划分为如下三大类： 创建和解析邮件的API 发送邮件的API 接收邮件的API 以上三种类型的API在JavaMail 中由多个类组成，但是主要有四个核心类，我们在编写程序时，记住这四个核心类，就很容易编写出Java邮件处理程序。","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/javamail/","category":["springboot","mail"]},{"title":"让hexo的首页只显示文章的部分内容而不是全部","link":"https://rogchen.github.com/2020/12/21/hexo-more/","description":"Hexo 的 Next 主题默认是首页显示你每篇文章的全文内容，那么要如何设置只显示部分呢？ 我们通过下面的三种方式实现: 第一种方法 用文本编辑器打开 themes/ 目录下的对应的主题的theme文件夹下的 _config.yml 文件，找到这段代码，如果没有则新建，可能不同的主题会不支持这种方法： 123451 # Automatically Excerpt. Not recommend.2 # Please use &lt;!-- more --&gt; in the post to control excerpt accurately.3 auto_excerpt:4 enable: false5 length: 150 把 enable 的 false 改成 true 就行了，然后 length 是设定文章预览的文本长度。","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/hexo-more/","category":["hexo"]},{"title":"Hello World","link":"https://rogchen.github.com/2020/12/21/hello-world/","description":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/hello-world/","category":["web"]},{"title":"git命令学习","link":"https://rogchen.github.com/2020/12/21/git-learning/","description":"随着git越来越火，学习好git的常规操作是很有必要。我们从本地-&gt;远程，使用https到使用ssh来介绍使用git 前言：git的初始化配置1、创建文件夹mkdir 文件名 2、初始化初始化本地仓库（.git目录）存放的是本地库配置信息，不要胡乱删除修改。git init","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/git-learning/","category":["git","linux"]},{"title":"使用eureka注册中心","link":"https://rogchen.github.com/2020/12/21/eureka-config/","description":"1、单机下 推荐使用idea快速构造springboot工程，自动引入相关配置文件。 引入相关pom文件1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt;","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/eureka-config/","category":["eureka","springcloud","微服务"]},{"title":"hexo私密功能","link":"https://rogchen.github.com/2020/12/21/draft/","description":"1.草稿相当于很多博客都有的“私密文章”功能。 会在source/_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。1$ hexo new draft \"new draft\" 如果你希望强行预览草稿，更改配置文件：1render_drafts: true 或者，如下方式启动server：1$ hexo server --drafts 下面这条命令可以把草稿变成文章，或者页面：1$ hexo publish [layout] &lt;filename&gt; 2.常用命令","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/draft/","category":["draft","hexo"]},{"title":"windows通过命令获取连接过的所有wifi和密码","link":"https://rogchen.github.com/2020/12/21/cmd_wifi/","description":"在windows 打开dos（win+r）输入下面命令就列出很多行 你以前连接过的wifi信息、加密方式、包括密码1for /f \"skip=9 tokens=1,2 delims=:\" %i in ('netsh wlan show profiles') do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear","pubDate":"Mon, 21 Dec 2020 01:41:42 GMT","guid":"https://rogchen.github.com/2020/12/21/cmd_wifi/","category":["wifi","cmd"]}]}